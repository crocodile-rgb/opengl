
#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <iostream>
using namespace std;

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow *window);

//记录编译的顶点着色器代码
const char *vertexShaderSource = "#version 330 core\n"
"layout (location=0) in vec3 aPos;\n"//用vec3类型的aPos来表示输入的位置特性
"void main()\n"
"{\n"
"	gl_Position=vec4(aPos.x,aPos.y,aPos.z,1.0);\n"
"}\0";
//记录编译的片段着色器代码
const char *fragmentShaderSource = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"	FragColor=vec4(1.0f,0.6f,0.4f,1.0f);\n"
"}\n\0";

int main() 
{
	//初始化GLFW
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	//创建窗口对象，返回指针
	GLFWwindow* window = glfwCreateWindow(800, 600, "LearnOpenGL", NULL, NULL);
	if (window == NULL) 
	{
		std::cout << "初始化 GLFW 失败" << std::endl;
		glfwTerminate();
		return -1;
	}
	//设置窗口context为主context
	glfwMakeContextCurrent(window);

	//初始化GLAD,管理函数指针
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) 
	{
		std::cout << "初始化 GLAD 失败" << std::endl;
		return -1;
	}

	//初始化在GLFW上的窗口
	glViewport(0,0,800,600);
	//窗口可拉动大小
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback); 
	
	//创建vertexShader
	unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexShader,1,&vertexShaderSource,NULL);
	glCompileShader(vertexShader);
	//创建fragmentShader
	unsigned int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
	glCompileShader(fragmentShader);

	//将着色器链接到一个程序对象上
	unsigned int shaderProgram = glCreateProgram();
	glAttachShader(shaderProgram,vertexShader);
	glAttachShader(shaderProgram,fragmentShader);
	glLinkProgram(shaderProgram);
	
	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);

	//输入三角形顶点坐标
	float vertices[] = {
		-0.5f,-0.5f,0.0f, //左
		0.5f,-0.5f,0.0f, //右
		0.0f,0.5f,0.0f,  //上
	};

	//把顶点数据储存在显存中，用VBO顶点缓冲对象来管理
	unsigned int VBO;
	glGenBuffers(1, &VBO);
	unsigned int VAO;
	glGenVertexArrays(1, &VAO);

	//初始化代码（只运行一次 (除非你的物体频繁改变)）
	//1.绑定VAO
	glBindVertexArray(VAO);
	//2. 把顶点数组复制到缓冲中供OpenGL使用
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
	// 3. 设置顶点属性指针(在渲染前指定OpenGL该如何解释顶点数据)
	glVertexAttribPointer(0,3,GL_FLOAT,GL_FALSE,3*sizeof(float),(void*)0);//第一个参数与vertexShader的position = 0对应
	glEnableVertexAttribArray(0);


	//不断绘制图像并接受输入
	while (!glfwWindowShouldClose(window)) 
	{
		//输入
		processInput(window);
		//渲染指令
		glClearColor(0.2f, 0.3f, 0.3f, 0.1f);
		glClear(GL_COLOR_BUFFER_BIT);//清除颜色缓冲，填充为glclearcolor设置的颜色

		//4. 绘制物体
		glUseProgram(shaderProgram);
		glBindVertexArray(VAO);
		glDrawArrays(GL_TRIANGLES,0,3);

		//交换缓冲，检查并调用事件
		glfwSwapBuffers(window);
		glfwPollEvents();
	}
	//释放资源
	glfwTerminate();
	return 0;
}
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
	glViewport(0, 0, width, height);
}
//自定义输入函数
void processInput(GLFWwindow *window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);
}
